name: Build Binaries

on:
  workflow_dispatch:
  push:
    branches:
    - '**'              # every branch
    - '!no-build-**'    # unless marked as no-build

env:
  GEODE_CI: ''
  CCACHE_ACTION_CI: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: Windows
          os: windows-latest
          id: win
          extra_flags: -T host=x64 -A win32 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEODE_DEBUG=On
          # uncomment to use vs clang-cl and ninja
          #extra_flags: >
          #  --no-warn-unused-cli
          #  "-DCMAKE_C_COMPILER:FILEPATH=$env:VCINSTALLDIR\Tools\Llvm\bin\clang-cl.exe"
          #  "-DCMAKE_CXX_COMPILER:FILEPATH=$env:VCINSTALLDIR\Tools\Llvm\bin\clang-cl.exe"
          #  -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEODE_DEBUG=On
          cli_cmd: ''
          package_cmd: 'makensis -WX -V3 ./installer/windows/installer.nsi'
          installer_path: './installer/windows/sapphire-installer-win.exe'

        - name: macOS
          os: macos-latest
          id: mac
          extra_flags: >
            -DCMAKE_C_COMPILER=clang
            -DCMAKE_CXX_COMPILER=clang++
            -DCMAKE_C_COMPILER_LAUNCHER=ccache
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
            -DCMAKE_BUILD_TYPE=RelWithDebInfo -DGEODE_DEBUG=On -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13
          cli_cmd: 'chmod +x $GITHUB_WORKSPACE/cli/sapphire'
          package_cmd: './installer/mac/package.sh ./bin/nightly ./installer/mac/sapphire-installer-mac.pkg'
          installer_path: './installer/mac/sapphire-installer-mac.pkg'

    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ matrix.config.os }}
      if: matrix.config.id == 'mac'

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1.12.1
      with:
        arch: amd64_x86
      if: matrix.config.id == 'win'

    - name: Download CLI
      uses: robinraju/release-downloader@v1.8
      with:
        repository: KWHYTHUB/cli
        latest: true
        fileName: '*-${{ matrix.config.id }}.zip'
        tarBall: false
        zipBall: false
        out-file-path: "cli"

    - name: Setup CLI
      run: |
        7z x "${{ github.workspace }}/cli/*-${{ matrix.config.id }}.zip" -o"${{ github.workspace }}/cli"
        ${{ matrix.config.cli_cmd }}
        echo "${{ github.workspace }}/cli" >> $GITHUB_PATH

    - name: Configure
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCLI_PATH="${{ github.workspace }}/cli"
        ${{ matrix.config.extra_flags }}

    - name: Build
      run: |
        cd ${{ github.workspace }}/build
        cmake --build . --config RelWithDebInfo --parallel
        rm ${{ github.workspace }}/bin/nightly/resources/.sapphire_cache

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sapphire-${{ matrix.config.id }}
        path: ./bin/nightly

    - name: Package Installer
      run: ${{ matrix.config.package_cmd }}

    - name: Upload Installer
      uses: actions/upload-artifact@v3
      with:
        name: sapphire-installer-${{ matrix.config.id }}
        path: ${{ matrix.config.installer_path }}

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Declare Version Variables
        id: ref
        shell: bash
        run: |
          echo "version=$(cat ${{ github.workspace }}/VERSION | xargs)" >> $GITHUB_OUTPUT
          echo "hash=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}

      - name: Move Installers
        run: |
          mv sapphire-installer-mac/sapphire-installer-mac.pkg sapphire-installer-${{ steps.ref.outputs.hash }}-mac.pkg
          mv sapphire-installer-win/sapphire-installer-win.exe sapphire-installer-${{ steps.ref.outputs.hash }}-win.exe

      - name: Zip MacOS Artifacts
        uses: vimtor/action-zip@v1.1
        with:
          files: sapphire-mac/Sapphire.dylib sapphire-mac/SapphireBootstrapper.dylib
          dest: sapphire-${{ steps.ref.outputs.hash }}-mac.zip

      - name: Zip Windows Artifacts
        uses: vimtor/action-zip@v1.1
        with:
          files: sapphire-win/XInput9_1_0.dll sapphire-win/Sapphire.dll sapphire-win/SapphireUpdater.exe sapphire-win/Sapphire.lib sapphire-win/Sapphire.pdb
          dest: sapphire-${{ steps.ref.outputs.hash }}-win.zip

      # TODO change in 2.0.0
      - name: Zip Windows Resources
        uses: vimtor/action-zip@v1.1
        with:
          files: sapphire-win/resources
          dest: resources-win.zip

      # This is basically a hack because of line endings. Blame windows.
      - name: Zip MacOS Resources
        uses: vimtor/action-zip@v1.1
        with:
          files: sapphire-mac/resources
          dest: resources-mac.zip

      - name: Update Nightly Release
        uses: andelf/nightly-release@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly
          name: 'Development Release'
          body: |
            Sapphire development release for commit ${{ github.sha }}. Since this is not a regular release, Sapphire will not install the resources automatically, so you should use the installer if you want them.
          files: |
            ./sapphire-installer-${{ steps.ref.outputs.hash }}-mac.pkg
            ./sapphire-installer-${{ steps.ref.outputs.hash }}-win.exe
            ./sapphire-${{ steps.ref.outputs.hash }}-mac.zip
            ./sapphire-${{ steps.ref.outputs.hash }}-win.zip
            ./resources-win.zip
            ./resources-mac.zip
